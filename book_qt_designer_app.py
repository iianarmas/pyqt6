# ============= MAIN.PY ============= #

import json

from PyQt6.QtWidgets import QApplication, QMainWindow
from PyQt6 import QtCore, QtGui
from PyQt6.QtCore import Qt, QModelIndex

from MainWindow import Ui_MainWindow

tick = QtGui.QImage('resources/icons/icons8-tick-16.png')


# tag::model[]
class TodoModel(QtCore.QAbstractListModel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.todos = []

    def data(self, index: QModelIndex, role: int = ...):
        if role == Qt.ItemDataRole.DisplayRole:
            _, text = self.todos[index.row()]
            return text

        if role == Qt.ItemDataRole.DecorationRole:
            status, _ = self.todos[index.row()]
            if status:
                return tick

    def rowCount(self, parent: QModelIndex = ...):
        return len(self.todos)


# end::model[]


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setupUi(self)

        # instantiate TodoModel class
        self.model = TodoModel()

        # load data form json file
        self.load()

        self.todoView.setModel(self.model)

        # connect buttons
        self.addButton.pressed.connect(self.add)
        self.deleteButton.pressed.connect(self.delete)
        self.completeButton.pressed.connect(self.complete)

    def add(self):
        text = self.todoEdit.text()
        text = text.strip()

        if text:
            self.model.todos.append((False, text))
            self.model.layoutChanged.emit()
            self.todoEdit.setText('')

            self.save()

    def delete(self):
        indexes = self.todoView.selectedIndexes()
        if indexes:
            index = indexes[0]
            # remove the item and refresh
            del self.model.todos[index.row()]
            self.model.layoutChanged.emit()
            self.todoView.clearSelection()

            self.save()

    def complete(self):
        indexes = self.todoView.selectedIndexes()
        if indexes:
            index = indexes[0]
            row = index.row()
            status, text = self.model.todos[row]
            self.model.todos[row] = (True, text)
            # .dataChanged takes top-left and bottom right, which are equal
            # for single selection
            self.model.dataChanged.emit(index, index)
            # clear the selection (as it is no longer valid)
            self.todoView.clearSelection()

            self.save()

    def load(self):
        try:
            with open('resources/db/data.json', 'r') as file:
                self.model.todos = json.load(file)
        except Exception:
            pass

    def save(self):
        with open('resources/db/data.json', 'w') as file:
            json.dump(self.model.todos, file)


if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec()
    
    
# ============= MAINWINDOW.PY ============= #

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(274, 349)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.todoView = QtWidgets.QListView(self.centralwidget)
        self.todoView.setObjectName("todoView")
        self.verticalLayout.addWidget(self.todoView)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.deleteButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteButton.setObjectName("deleteButton")
        self.horizontalLayout_2.addWidget(self.deleteButton)
        self.completeButton = QtWidgets.QPushButton(self.centralwidget)
        self.completeButton.setObjectName("completeButton")
        self.horizontalLayout_2.addWidget(self.completeButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.todoEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.todoEdit.setObjectName("todoEdit")
        self.verticalLayout.addWidget(self.todoEdit)
        self.addButton = QtWidgets.QPushButton(self.centralwidget)
        self.addButton.setObjectName("addButton")
        self.verticalLayout.addWidget(self.addButton)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 274, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.deleteButton.setText(_translate("MainWindow", "Delete"))
        self.completeButton.setText(_translate("MainWindow", "Complete"))
        self.addButton.setText(_translate("MainWindow", "Add Todo"))

